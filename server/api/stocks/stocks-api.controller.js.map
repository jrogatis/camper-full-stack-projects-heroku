{"version":3,"sources":["api/stocks/stocks-api.controller.js"],"names":["index","showQuotes","show","create","upsert","patch","destroy","dateFormats","camelize","text","slugify","s","toDate","value","valueForError","date","getFullYear","err","isUndefined","toFloat","valueForNaN","result","parseFloat","isNaN","toInt","parseInt","transformHistorical","symbol","data","headings","shift","reverse","map","line","forEach","heading","i","includes","parseCSV","trim","split","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","values","body","url","from","to","qsa","a","format","b","c","d","e","f","g","ignore","uri","qs","ret","findOne","ID","params","id","_id","findOneAndUpdate","setDefaultsOnInsert","runValidators","findById"],"mappings":"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","file":"api/stocks/stocks-api.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/stocks              ->  index\n * POST     /api/stocks/quotes       ->  showQuotes\n * POST    /api/stocks              ->  create\n * GET     /api/stocks/:id          ->  show\n * PUT     /api/stocks/:id          ->  upsert\n * PATCH   /api/stocks/:id          ->  patch\n * DELETE  /api/stocks/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Stocks from './stocks-api.model';\nimport _ from 'lodash';\nimport qs from 'querystring';\nimport rp from 'request-promise';\nimport moment from 'moment';\nimport S from 'string';\nconst  dateFormats = ['YYYY-MM-DD', 'MM/DD/YYYY'];\n\n\nfunction camelize(text) {\n  return S(text)\n    .slugify()\n    .camelize()\n    .s;\n}\n\nfunction toDate(value, valueForError) {\n  try {\n    var date = moment(value, dateFormats).toDate();\n    if (date.getFullYear() < 1400) { return null; }\n    return date;\n  } catch (err) {\n    if (_.isUndefined(valueForError)) {\n      return null;\n    } else {\n      return valueForError;\n    }\n  }\n}\n\nfunction toFloat(value, valueForNaN) {\n  var result = parseFloat(value);\n  if (isNaN(result)) {\n    if (_.isUndefined(valueForNaN)) {\n      return null;\n    } else {\n      return valueForNaN;\n    }\n  } else  {\n    return result;\n  }\n}\n\nfunction toInt(value, valueForNaN) {\n  var result = parseInt(value, 10);\n  if (isNaN(result)) {\n    if (_.isUndefined(valueForNaN)) {\n      return null;\n    } else {\n      return valueForNaN;\n    }\n  } else  {\n    return result;\n  }\n}\n\nfunction transformHistorical(symbol, data) {\n  var headings = data.shift();\n  return _(data)\n    .reverse()\n    .map(function (line) {\n      var result = {};\n      headings.forEach(function (heading, i) {\n        var value = line[i];\n        if (_.includes(['Volume'], heading)) {\n          value = toInt(value, null);\n        } else if (_.includes(['Open', 'High', 'Low', 'Close', 'Adj Close', 'Dividends'], heading)) {\n          value = toFloat(value, null);\n        } else if (_.includes(['Date'], heading)) {\n          value = value\n          /*value = toDate(value, null);\n          if (value && !moment(value).isValid()) {\n            value = null;\n          }*/\n        }\n        result[camelize(heading)] = value;\n      });\n      result.symbol = symbol;\n      return result;\n    })\n    .value();\n}\n\nfunction parseCSV(text) {\n  return S(text).trim().s.split('\\n').map(function (line) {\n    return S(line).trim().parseCSV();\n  });\n}\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return entity => {\n    //console.log('no respond', entity);\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(function() {\n          return res.status(204).end();\n        });\n    }};\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of stocks\nexport function index(req, res) {\n  return Stocks.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\nexport function showQuotes(req, res) {\n  let values = req.body;\n  const url = 'http://chart.finance.yahoo.com/table.csv?s=';\n  values.from = moment(values.from);\n  values.to = moment(values.to);\n  const qsa = {\n      s: values.symbol,\n      a: values.from.format('MM') - 1,\n      b: values.from.format('DD'),\n      c: values.from.format('YYYY'),\n      d: values.to.format('MM') - 1,\n      e: values.to.format('DD'),\n      f: values.to.format('YYYY'),\n      g: 'd',\n      ignore: '.csv'\n\n  };\n\n  rp({uri: url, qs: qsa})\n    .then (ret => parseCSV(ret))\n    .then(data => transformHistorical(values.symbol, data))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n\n}\n\nexport function show(req, res) {\n  //console.log('no show', req.params.id);\n  return Stocks.findOne({\n    ID: req.params.id\n  }).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new nl in the DB\nexport function create(req, res) {\n  return Stocks.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Upserts the given nl in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Stocks.findOneAndUpdate(req.params.id, req.body, {\n    upsert: true,\n    setDefaultsOnInsert: true,\n    runValidators: true\n  }).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing nl in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Stocks.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a nl from the DB\nexport function destroy(req, res) {\n  return Stocks.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n\n\n"],"sourceRoot":"/source/"}