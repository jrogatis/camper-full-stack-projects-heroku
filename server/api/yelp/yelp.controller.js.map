{"version":3,"sources":["api/yelp/yelp.controller.js"],"names":["index","n","require","request_yelp","search_parameters","callback","httpMethod","url","set_parameters","location","sort","required_parameters","oauth_consumer_key","process","env","oauth_token","oauth_nonce","oauth_timestamp","toString","substr","oauth_signature_method","oauth_version","parameters","assign","consumerSecret","tokenSecret","signature","generate","encodeSignature","oauth_signature","paramURL","stringify","apiURL","error","response","body","req","res","params","setParams","status","end","console","log"],"mappings":"AAAA;;;;;AAKA;;AAEA;AACA;;;;;QAyCgBA,K,GAAAA,K;;AAxChB;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAHA,IAAMC,IAAIC,QAAQ,OAAR,GAAV;;AAKA,IAAMC,eAAe,SAAfA,YAAe,CAASC,iBAAT,EAA4BC,QAA5B,EAAsC;AACzD,MAAMC,aAAa,KAAnB;AACA,MAAMC,MAAM,+BAAZ;AACA,MAAMC,iBAAiB;AACrBC,cAAUL,iBADW;AAErBM,UAAM;AAFe,GAAvB;AAIA,MAAMC,sBAAsB;AAC1B;AACAC,wBAAoBC,QAAQC,GAAR,CAAYF,kBAFN;AAG1BG,iBAAaF,QAAQC,GAAR,CAAYC,WAHC;AAI1BC,iBAAaf,GAJa;AAK1BgB,qBAAiBhB,IACdiB,QADc,GAEdC,MAFc,CAEP,CAFO,EAEJ,EAFI,CALS;AAQ1BC,4BAAwB,WARE;AAS1BC,mBAAe;AATW,GAA5B;AAWA,MAAMC,aAAa,iBAAEC,MAAF,CAASf,cAAT,EAAyBG,mBAAzB,CAAnB;AACA,MAAMa,iBAAiBX,QAAQC,GAAR,CAAYU,cAAnC;AACA,MAAMC,cAAcZ,QAAQC,GAAR,CAAYW,WAAhC;AACA,MAAMC,YAAY,yBAAeC,QAAf,CAAwBrB,UAAxB,EAAoCC,GAApC,EAAyCe,UAAzC,EAAqDE,cAArD,EAAqEC,WAArE,EAAkF;AAClGG,qBAAiB;AADiF,GAAlF,CAAlB;AAGAN,aAAWO,eAAX,GAA6BH,SAA7B;AACA,MAAMI,WAAW,sBAAGC,SAAH,CAAaT,UAAb,CAAjB;AACA,MAAMU,SAAYzB,GAAZ,SAAmBuB,QAAzB;AACA;AACA,yBAAQE,MAAR,EAAgB,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgC;AAC9C,WAAO9B,SAAS4B,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,CAAP;AACD,GAFD;AAGD,CA/BD;;AAiCA;AACO,SAASnC,KAAT,CAAeoC,GAAf,EAAoBC,GAApB,EAAyB;AAC9BlC,eAAaiC,IAAIE,MAAJ,CAAWC,SAAxB,EAAmC,UAACN,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC5D,QAAG,CAACF,KAAJ,EAAW;AACT;AACAI,UAAIG,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoBN,IAApB;AACD,KAHD,MAGO;AACLO,cAAQC,GAAR,CAAYV,KAAZ;AACD;AACF,GAPD;AAQD","file":"yelp.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/yelp/:id          ->  show\n */\n\n'use strict';\n\n//import jsonpatch from 'fast-json-patch';\n//import querystring from 'querystring';\nimport oauthSignature from 'oauth-signature';\nconst n = require('nonce')();\nimport _ from 'lodash';\nimport qs from 'querystring';\nimport request from 'request';\n\nconst request_yelp = function(search_parameters, callback) {\n  const httpMethod = 'GET';\n  const url = 'http://api.yelp.com/v2/search';\n  const set_parameters = {\n    location: search_parameters,\n    sort: '2'\n  };\n  const required_parameters = {\n    //callback : 'cb',\n    oauth_consumer_key: process.env.oauth_consumer_key,\n    oauth_token: process.env.oauth_token,\n    oauth_nonce: n(),\n    oauth_timestamp: n()\n      .toString()\n      .substr(0, 10),\n    oauth_signature_method: 'HMAC-SHA1',\n    oauth_version: '1.0'\n  };\n  const parameters = _.assign(set_parameters, required_parameters);\n  const consumerSecret = process.env.consumerSecret;\n  const tokenSecret = process.env.tokenSecret;\n  const signature = oauthSignature.generate(httpMethod, url, parameters, consumerSecret, tokenSecret, {\n    encodeSignature: false\n  });\n  parameters.oauth_signature = signature;\n  const paramURL = qs.stringify(parameters);\n  const apiURL = `${url}?${paramURL}`;\n  /* Then we use request to send make the API Request */\n  request(apiURL, function(error, response, body) {\n    return callback(error, response, body);\n  });\n};\n\n// Gets a list of venues\nexport function index(req, res) {\n  request_yelp(req.params.setParams, (error, response, body) => {\n    if(!error) {\n      //console.log(body.businesses);\n      res.status(200).end(body);\n    } else {\n      console.log(error);\n    }\n  });\n}\n"]}